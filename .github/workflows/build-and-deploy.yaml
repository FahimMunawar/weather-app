name: Release

on:
  release:
    types: [created]

env:
  DOCKER_IMAGE_NAME: weather-app
  RELEASE_VERSION: ${{ github.event.release.tag_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract release version without "v" prefix
      run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub (Manual)
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Extract release version
      id: vars
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg API_VERSION=${{ env.RELEASE_VERSION }} \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }} .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }}

    - name: Run container and verify API version
      run: |
        docker run -d --rm \
          -e RELEASE_VERSION=${{ env.RELEASE_VERSION }} \
          -e WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
          -p 5000:5000 --name test-container ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }}

        sleep 5

        version=$(curl -s http://localhost:5000/api/hello | jq -r '.version')

        if [ "$version" != "${{ env.RELEASE_VERSION }}" ]; then
          echo "Version mismatch: expected ${{ env.RELEASE_VERSION }}, got $version"
          exit 1
        else
          echo "Version check passed: $version"
        fi

        docker stop test-container

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Load environment variables
      run: |
        if [ -f .github/variables/test.env ]; then
          set -a
          source .github/variables/test.env
          set +a
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          echo "CLUSTER_RESOURCE_GROUP=$ClUSTER_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "HELM_TEMPLATE=$HELM_TEMPLATE" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        else
          echo "Environment file not found!"
          exit 1
        fi

    - name: Extract release version without "v" prefix
      run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

    # Login to Azure
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_TEST }}

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # # Create K8s secrets to pull images from Docker Hub
    # - name: Create secret in Kubernetes cluster
    #   uses: Azure/k8s-create-secret@v4
    #   with:
    #     namespace: ${{ env.NAMESPACE }}
    #     secret-name: dockerhub-secret
    #     container-registry-url: https://index.docker.io/v1/
    #     container-registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     container-registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Create Secret For Application Env Vars
      run: |
        kubectl -n ${{ env.NAMESPACE }} create secret generic ${{env.CONTAINER_NAME}}-secrets \
          --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
          --from-literal=RELEASE_VERSION=${{ env.VERSION }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Deploy To Kubernetes
      run: |
        helm upgrade --install ${{env.CONTAINER_NAME}} ${{env.HELM_TEMPLATE}} \
          --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/weather-app \
          --set image.tag=${{ env.VERSION }} \
          --namespace=${{env.NAMESPACE}} \
          --create-namespace

    - name: Check deployment status
      run: |
        kubectl rollout status deployment/${{ env.CONTAINER_NAME }} --namespace=${{ env.NAMESPACE }} --timeout=300s
        kubectl get services --namespace=${{ env.NAMESPACE }}