name: Release

on:
  release:
    types: [created]

env:
  DOCKER_IMAGE_NAME: weather-app
  RELEASE_VERSION: ${{ github.event.release.tag_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract release version without "v" prefix
      run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWOD }}

    - name: Extract release version
      id: vars
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg API_VERSION=${{ env.RELEASE_VERSION }} \
          -t ${{ secrets.DOCKER_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }}

    - name: Run container and verify API version
      run: |
        docker run -d --rm \
          -e API_VERSION=${{ env.RELEASE_VERSION }} \
          -e WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
          -p 5000:5000 --name test-container ${{ secrets.DOCKER_USERNAME }}/weather-app:${{ env.RELEASE_VERSION }}

        sleep 5

        version=$(curl -s http://localhost:5000/api/hello | jq -r '.version')

        if [ "$version" != "${{ env.RELEASE_VERSION }}" ]; then
          echo "Version mismatch: expected ${{ env.RELEASE_VERSION }}, got $version"
          exit 1
        else
          echo "Version check passed: $version"
        fi

        docker stop test-container

    - name: Deploy (optional)
      run: echo "Add your zero downtime deployment steps here"
